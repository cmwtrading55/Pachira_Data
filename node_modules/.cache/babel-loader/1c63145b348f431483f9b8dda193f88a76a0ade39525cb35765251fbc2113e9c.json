{"ast":null,"code":"// src/utils/SummaryDataFetcher.js\nimport { fetchDataFromSheet } from './DataFetcher';\nimport { calculateWeeklySummary, calculateAllSummary } from './Calculations';\nexport const fetchSummaryData = async (sheetId, apiKey, tabNames, pachiraTabNames) => {\n  try {\n    const tabDataResults = await fetchDataFromSheet(sheetId, apiKey, tabNames);\n    if (!tabDataResults || tabDataResults.length === 0) {\n      throw new Error('No data returned from the sheet.');\n    }\n    const summary = {};\n    const dailyPachiraSummary = {};\n    tabDataResults.forEach(({\n      tabName,\n      data\n    }) => {\n      const tabData = data.values || [];\n      tabData.slice(1).forEach(row => {\n        var _row$incomeColumnInde, _row$turnoverColumnIn;\n        const date = row[0];\n        const incomeColumnIndex = ['Tennis', 'MLB', 'American Football'].includes(tabName) ? 10 : 8;\n        const turnoverColumnIndex = tabName === 'Tennis' ? 4 : 5;\n        const incomeRaw = (_row$incomeColumnInde = row[incomeColumnIndex]) === null || _row$incomeColumnInde === void 0 ? void 0 : _row$incomeColumnInde.replace(/,/g, '').trim();\n        const turnoverRaw = (_row$turnoverColumnIn = row[turnoverColumnIndex]) === null || _row$turnoverColumnIn === void 0 ? void 0 : _row$turnoverColumnIn.replace(/,/g, '').trim();\n        const income = parseFloat(incomeRaw);\n        const turnover = parseFloat(turnoverRaw);\n        if (!isNaN(income) && !isNaN(turnover)) {\n          if (!summary[date]) {\n            summary[date] = {\n              date,\n              TotalTurnover: 0,\n              Total: 0\n            };\n          }\n          summary[date][tabName] = (summary[date][tabName] || 0) + income;\n          summary[date][`turnover_${tabName}`] = (summary[date][`turnover_${tabName}`] || 0) + turnover;\n          summary[date].TotalTurnover += turnover;\n          summary[date].Total += income;\n\n          // For Pachira Summary\n          if (pachiraTabNames.includes(tabName)) {\n            if (!dailyPachiraSummary[date]) {\n              dailyPachiraSummary[date] = {\n                date,\n                Total: 0\n              };\n            }\n            dailyPachiraSummary[date][tabName] = (dailyPachiraSummary[date][tabName] || 0) + income;\n            dailyPachiraSummary[date].Total += income;\n          }\n        }\n      });\n    });\n    const summaryArray = Object.values(summary);\n    const dailyPachiraArray = Object.values(dailyPachiraSummary);\n\n    // Calculate weekly and overall summaries\n    const weeklyPachiraArray = calculateWeeklySummary(dailyPachiraArray, pachiraTabNames);\n    const weeklySummaryData = calculateWeeklySummary(summaryArray, tabNames);\n    const allSummaryData = calculateAllSummary(summaryArray, tabNames);\n    return {\n      summaryData: summaryArray,\n      weeklySummaryData,\n      allSummaryData,\n      dailyPachiraData: dailyPachiraArray,\n      weeklyPachiraData: weeklyPachiraArray\n    };\n  } catch (error) {\n    console.error('Error fetching summary data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchDataFromSheet","calculateWeeklySummary","calculateAllSummary","fetchSummaryData","sheetId","apiKey","tabNames","pachiraTabNames","tabDataResults","length","Error","summary","dailyPachiraSummary","forEach","tabName","data","tabData","values","slice","row","_row$incomeColumnInde","_row$turnoverColumnIn","date","incomeColumnIndex","includes","turnoverColumnIndex","incomeRaw","replace","trim","turnoverRaw","income","parseFloat","turnover","isNaN","TotalTurnover","Total","summaryArray","Object","dailyPachiraArray","weeklyPachiraArray","weeklySummaryData","allSummaryData","summaryData","dailyPachiraData","weeklyPachiraData","error","console"],"sources":["C:/Users/CMW1/Downloads/pachira-financials/src/utils/SummaryDataFetcher.js"],"sourcesContent":["// src/utils/SummaryDataFetcher.js\r\nimport { fetchDataFromSheet } from './DataFetcher';\r\nimport { calculateWeeklySummary, calculateAllSummary } from './Calculations';\r\n\r\nexport const fetchSummaryData = async (sheetId, apiKey, tabNames, pachiraTabNames) => {\r\n  try {\r\n    const tabDataResults = await fetchDataFromSheet(sheetId, apiKey, tabNames);\r\n\r\n    if (!tabDataResults || tabDataResults.length === 0) {\r\n      throw new Error('No data returned from the sheet.');\r\n    }\r\n\r\n    const summary = {};\r\n    const dailyPachiraSummary = {};\r\n\r\n    tabDataResults.forEach(({ tabName, data }) => {\r\n      const tabData = data.values || [];\r\n      tabData.slice(1).forEach((row) => {\r\n        const date = row[0];\r\n\r\n        const incomeColumnIndex = ['Tennis', 'MLB', 'American Football'].includes(tabName) ? 10 : 8;\r\n        const turnoverColumnIndex = tabName === 'Tennis' ? 4 : 5;\r\n\r\n        const incomeRaw = row[incomeColumnIndex]?.replace(/,/g, '').trim();\r\n        const turnoverRaw = row[turnoverColumnIndex]?.replace(/,/g, '').trim();\r\n        const income = parseFloat(incomeRaw);\r\n        const turnover = parseFloat(turnoverRaw);\r\n\r\n        if (!isNaN(income) && !isNaN(turnover)) {\r\n          if (!summary[date]) {\r\n            summary[date] = { date, TotalTurnover: 0, Total: 0 };\r\n          }\r\n          summary[date][tabName] = (summary[date][tabName] || 0) + income;\r\n          summary[date][`turnover_${tabName}`] = (summary[date][`turnover_${tabName}`] || 0) + turnover;\r\n\r\n          summary[date].TotalTurnover += turnover;\r\n          summary[date].Total += income;\r\n\r\n          // For Pachira Summary\r\n          if (pachiraTabNames.includes(tabName)) {\r\n            if (!dailyPachiraSummary[date]) {\r\n              dailyPachiraSummary[date] = { date, Total: 0 };\r\n            }\r\n            dailyPachiraSummary[date][tabName] = (dailyPachiraSummary[date][tabName] || 0) + income;\r\n            dailyPachiraSummary[date].Total += income;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    const summaryArray = Object.values(summary);\r\n    const dailyPachiraArray = Object.values(dailyPachiraSummary);\r\n\r\n    // Calculate weekly and overall summaries\r\n    const weeklyPachiraArray = calculateWeeklySummary(dailyPachiraArray, pachiraTabNames);\r\n    const weeklySummaryData = calculateWeeklySummary(summaryArray, tabNames);\r\n    const allSummaryData = calculateAllSummary(summaryArray, tabNames);\r\n\r\n    return {\r\n      summaryData: summaryArray,\r\n      weeklySummaryData,\r\n      allSummaryData,\r\n      dailyPachiraData: dailyPachiraArray,\r\n      weeklyPachiraData: weeklyPachiraArray,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching summary data:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}