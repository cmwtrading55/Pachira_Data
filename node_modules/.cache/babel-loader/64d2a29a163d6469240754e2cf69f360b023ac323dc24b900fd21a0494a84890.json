{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CMW1\\\\Downloads\\\\pachira-financials\\\\src\\\\components\\\\GoogleSheetData.js\",\n  _s = $RefreshSig$();\n// src/components/GoogleSheetData.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleSheetData = () => {\n  _s();\n  const [summaryData, setSummaryData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const sheetId = '1D2B33Uj1vS_weRZQAQdMRcaQbk1KG1SAjNfoaHAKrSo'; // Your Google Sheet ID\n  const apiKey = 'AIzaSyBAPhvHyE-PbFUktWwlt-2_KJfwQTabEvQ'; // Your API Key\n  const tabNames = ['S1', 'S2', 'S3PM', 'S3IR', 'follow']; // List of your sheet tabs\n  const plColumnIndex = 8; // Index for the P/L column (Column I)\n\n  useEffect(() => {\n    const fetchAllData = async () => {\n      try {\n        // Fetch data from all tabs\n        const tabDataPromises = tabNames.map(tab => axios.get(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${tab}?key=${apiKey}`));\n\n        // Wait for all promises to resolve\n        const responses = await Promise.all(tabDataPromises);\n\n        // Combine all data into a summary object\n        const summary = {};\n        responses.forEach((response, tabIndex) => {\n          const tabData = response.data.values || [];\n          const tabName = tabNames[tabIndex];\n\n          // Debugging: Log the first few rows to check structure\n          console.log(`Data for ${tabName}:`, tabData.slice(0, 5));\n\n          // Skip the header row and process each row\n          tabData.slice(1).forEach((row, rowIndex) => {\n            const date = row[0]; // Date column\n\n            // Check if P/L column exists and has a valid number\n            if (row[plColumnIndex] !== undefined) {\n              // Remove commas and parse the number\n              const plRaw = row[plColumnIndex].replace(/,/g, '').trim();\n              const pl = parseFloat(plRaw);\n              if (!isNaN(pl)) {\n                if (!summary[date]) {\n                  summary[date] = {\n                    date\n                  };\n                }\n                summary[date][tabName] = (summary[date][tabName] || 0) + pl;\n\n                // Debugging: Log each row processing\n                console.log(`Processing row ${rowIndex + 1} for ${tabName} on ${date}:`, row, `Parsed P/L: ${pl}`);\n              } else {\n                console.warn(`Invalid P/L value at row ${rowIndex + 1} for ${tabName} on ${date}:`, row[plColumnIndex]);\n              }\n            }\n          });\n        });\n\n        // Convert summary object to array and calculate total\n        const summaryArray = Object.values(summary).map(entry => {\n          const total = tabNames.reduce((acc, tab) => acc + (entry[tab] || 0), 0);\n          return {\n            ...entry,\n            Total: total\n          };\n        });\n        setSummaryData(summaryArray);\n      } catch (error) {\n        setError('Error fetching data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Performance Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), tabNames.map((tab, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: tab\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: summaryData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), tabNames.map((tab, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[tab] !== undefined ? row[tab].toFixed(2) : '-'\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.Total.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleSheetData, \"ns0LRiz5pL8Aw1lZjKMEnGoLrbY=\");\n_c = GoogleSheetData;\nexport default GoogleSheetData;\nvar _c;\n$RefreshReg$(_c, \"GoogleSheetData\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GoogleSheetData","_s","summaryData","setSummaryData","loading","setLoading","error","setError","sheetId","apiKey","tabNames","plColumnIndex","fetchAllData","tabDataPromises","map","tab","get","responses","Promise","all","summary","forEach","response","tabIndex","tabData","data","values","tabName","console","log","slice","row","rowIndex","date","undefined","plRaw","replace","trim","pl","parseFloat","isNaN","warn","summaryArray","Object","entry","total","reduce","acc","Total","children","fileName","_jsxFileName","lineNumber","columnNumber","border","index","cellIndex","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/CMW1/Downloads/pachira-financials/src/components/GoogleSheetData.js"],"sourcesContent":["// src/components/GoogleSheetData.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst GoogleSheetData = () => {\r\n  const [summaryData, setSummaryData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sheetId = '1D2B33Uj1vS_weRZQAQdMRcaQbk1KG1SAjNfoaHAKrSo'; // Your Google Sheet ID\r\n  const apiKey = 'AIzaSyBAPhvHyE-PbFUktWwlt-2_KJfwQTabEvQ'; // Your API Key\r\n  const tabNames = ['S1', 'S2', 'S3PM', 'S3IR', 'follow']; // List of your sheet tabs\r\n  const plColumnIndex = 8; // Index for the P/L column (Column I)\r\n\r\n  useEffect(() => {\r\n    const fetchAllData = async () => {\r\n      try {\r\n        // Fetch data from all tabs\r\n        const tabDataPromises = tabNames.map((tab) =>\r\n          axios.get(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${tab}?key=${apiKey}`)\r\n        );\r\n\r\n        // Wait for all promises to resolve\r\n        const responses = await Promise.all(tabDataPromises);\r\n\r\n        // Combine all data into a summary object\r\n        const summary = {};\r\n\r\n        responses.forEach((response, tabIndex) => {\r\n          const tabData = response.data.values || [];\r\n          const tabName = tabNames[tabIndex];\r\n\r\n          // Debugging: Log the first few rows to check structure\r\n          console.log(`Data for ${tabName}:`, tabData.slice(0, 5));\r\n\r\n          // Skip the header row and process each row\r\n          tabData.slice(1).forEach((row, rowIndex) => {\r\n            const date = row[0]; // Date column\r\n\r\n            // Check if P/L column exists and has a valid number\r\n            if (row[plColumnIndex] !== undefined) {\r\n              // Remove commas and parse the number\r\n              const plRaw = row[plColumnIndex].replace(/,/g, '').trim();\r\n              const pl = parseFloat(plRaw);\r\n\r\n              if (!isNaN(pl)) {\r\n                if (!summary[date]) {\r\n                  summary[date] = { date };\r\n                }\r\n                summary[date][tabName] = (summary[date][tabName] || 0) + pl;\r\n\r\n                // Debugging: Log each row processing\r\n                console.log(`Processing row ${rowIndex + 1} for ${tabName} on ${date}:`, row, `Parsed P/L: ${pl}`);\r\n              } else {\r\n                console.warn(`Invalid P/L value at row ${rowIndex + 1} for ${tabName} on ${date}:`, row[plColumnIndex]);\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        // Convert summary object to array and calculate total\r\n        const summaryArray = Object.values(summary).map(entry => {\r\n          const total = tabNames.reduce((acc, tab) => acc + (entry[tab] || 0), 0);\r\n          return { ...entry, Total: total };\r\n        });\r\n\r\n        setSummaryData(summaryArray);\r\n      } catch (error) {\r\n        setError('Error fetching data');\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Performance Summary</h1>\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            {tabNames.map((tab, index) => (\r\n              <th key={index}>{tab}</th>\r\n            ))}\r\n            <th>Total</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {summaryData.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              <td>{row.date}</td>\r\n              {tabNames.map((tab, cellIndex) => (\r\n                <td key={cellIndex}>{row[tab] !== undefined ? row[tab].toFixed(2) : '-'}</td>\r\n              ))}\r\n              <td>{row.Total.toFixed(2)}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleSheetData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}