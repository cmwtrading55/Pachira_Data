{"ast":null,"code":"// src/utils/Calculations.js\n\n// Function to calculate weekly summary with Monday as the start of the week\nexport const calculateWeeklySummary = (dailyData, tabNames) => {\n  const weeklySummary = {};\n  dailyData.forEach(row => {\n    const dateParts = row.date.split('/');\n    const [day, month, year] = dateParts.map(Number);\n    const dateObj = new Date(year, month - 1, day);\n\n    // Get the day of the week (0 = Sunday, 1 = Monday, etc.)\n    const dayOfWeek = dateObj.getDay();\n    // If the day is Sunday (0), set it to 7 to treat it as the end of the week\n    const adjustedDay = dayOfWeek === 0 ? 7 : dayOfWeek;\n    // Calculate the Monday of the current week\n    const weekStart = new Date(dateObj.setDate(dateObj.getDate() - adjustedDay + 1));\n    const weekKey = weekStart.toISOString().split('T')[0];\n    if (!weeklySummary[weekKey]) {\n      weeklySummary[weekKey] = {\n        weekStart: weekKey\n      };\n    }\n    tabNames.forEach(tab => {\n      weeklySummary[weekKey][tab] = (weeklySummary[weekKey][tab] || 0) + (row[tab] || 0);\n    });\n    weeklySummary[weekKey].Total = (weeklySummary[weekKey].Total || 0) + row.Total;\n  });\n  return Object.values(weeklySummary);\n};\n\n// Function to calculate all summary\nexport const calculateAllSummary = (dailyData, tabNames) => {\n  const totalSummary = {};\n  dailyData.forEach(row => {\n    tabNames.forEach(tab => {\n      totalSummary[tab] = totalSummary[tab] || {\n        totalPL: 0,\n        totalTurnover: 0,\n        roi: 0\n      };\n      totalSummary[tab].totalPL += row[tab] || 0;\n      totalSummary[tab].totalTurnover += row[`turnover_${tab}`] || 0;\n    });\n  });\n\n  // Calculate ROI and add to summary data\n  return Object.entries(totalSummary).map(([tab, totals]) => {\n    const roi = totals.totalTurnover !== 0 ? totals.totalPL / totals.totalTurnover * 100 : 0;\n    return {\n      tabName: tab,\n      totalPL: totals.totalPL,\n      totalTurnover: totals.totalTurnover,\n      roi\n    };\n  });\n};\n\n// Function to calculate total row for All Summary\nexport const calculateTotalRow = allSummaryData => {\n  const totalPL = allSummaryData.reduce((sum, row) => sum + row.totalPL, 0);\n  const totalTurnover = allSummaryData.reduce((sum, row) => sum + row.totalTurnover, 0);\n  const roi = totalTurnover !== 0 ? totalPL / totalTurnover * 100 : 0;\n  return {\n    tabName: 'Total',\n    totalPL,\n    totalTurnover,\n    roi\n  };\n};","map":{"version":3,"names":["calculateWeeklySummary","dailyData","tabNames","weeklySummary","forEach","row","dateParts","date","split","day","month","year","map","Number","dateObj","Date","dayOfWeek","getDay","adjustedDay","weekStart","setDate","getDate","weekKey","toISOString","tab","Total","Object","values","calculateAllSummary","totalSummary","totalPL","totalTurnover","roi","entries","totals","tabName","calculateTotalRow","allSummaryData","reduce","sum"],"sources":["C:/Users/CMW1/Downloads/pachira-financials/src/utils/Calculations.js"],"sourcesContent":["// src/utils/Calculations.js\r\n\r\n// Function to calculate weekly summary with Monday as the start of the week\r\nexport const calculateWeeklySummary = (dailyData, tabNames) => {\r\n  const weeklySummary = {};\r\n\r\n  dailyData.forEach(row => {\r\n    const dateParts = row.date.split('/');\r\n    const [day, month, year] = dateParts.map(Number);\r\n    const dateObj = new Date(year, month - 1, day);\r\n\r\n    // Get the day of the week (0 = Sunday, 1 = Monday, etc.)\r\n    const dayOfWeek = dateObj.getDay();\r\n    // If the day is Sunday (0), set it to 7 to treat it as the end of the week\r\n    const adjustedDay = dayOfWeek === 0 ? 7 : dayOfWeek;\r\n    // Calculate the Monday of the current week\r\n    const weekStart = new Date(dateObj.setDate(dateObj.getDate() - adjustedDay + 1));\r\n    const weekKey = weekStart.toISOString().split('T')[0];\r\n\r\n    if (!weeklySummary[weekKey]) {\r\n      weeklySummary[weekKey] = { weekStart: weekKey };\r\n    }\r\n\r\n    tabNames.forEach(tab => {\r\n      weeklySummary[weekKey][tab] = (weeklySummary[weekKey][tab] || 0) + (row[tab] || 0);\r\n    });\r\n\r\n    weeklySummary[weekKey].Total = (weeklySummary[weekKey].Total || 0) + row.Total;\r\n  });\r\n\r\n  return Object.values(weeklySummary);\r\n};\r\n\r\n// Function to calculate all summary\r\nexport const calculateAllSummary = (dailyData, tabNames) => {\r\n  const totalSummary = {};\r\n\r\n  dailyData.forEach(row => {\r\n    tabNames.forEach(tab => {\r\n      totalSummary[tab] = totalSummary[tab] || { totalPL: 0, totalTurnover: 0, roi: 0 };\r\n      totalSummary[tab].totalPL += row[tab] || 0;\r\n      totalSummary[tab].totalTurnover += row[`turnover_${tab}`] || 0;\r\n    });\r\n  });\r\n\r\n  // Calculate ROI and add to summary data\r\n  return Object.entries(totalSummary).map(([tab, totals]) => {\r\n    const roi = totals.totalTurnover !== 0 ? (totals.totalPL / totals.totalTurnover) * 100 : 0;\r\n    return {\r\n      tabName: tab,\r\n      totalPL: totals.totalPL,\r\n      totalTurnover: totals.totalTurnover,\r\n      roi\r\n    };\r\n  });\r\n};\r\n\r\n// Function to calculate total row for All Summary\r\nexport const calculateTotalRow = (allSummaryData) => {\r\n  const totalPL = allSummaryData.reduce((sum, row) => sum + row.totalPL, 0);\r\n  const totalTurnover = allSummaryData.reduce((sum, row) => sum + row.totalTurnover, 0);\r\n  const roi = totalTurnover !== 0 ? (totalPL / totalTurnover) * 100 : 0;\r\n\r\n  return {\r\n    tabName: 'Total',\r\n    totalPL,\r\n    totalTurnover,\r\n    roi\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}