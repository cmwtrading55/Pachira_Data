{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CMW1\\\\Downloads\\\\pachira-financials\\\\src\\\\components\\\\GoogleSheetData.js\",\n  _s = $RefreshSig$();\n// src/components/GoogleSheetData.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './GoogleSheetData.css'; // Import CSS for conditional formatting\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleSheetData = () => {\n  _s();\n  const [summaryData, setSummaryData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortConfig, setSortConfig] = useState({\n    key: 'date',\n    direction: 'ascending'\n  });\n  const sheetId = '1D2B33Uj1vS_weRZQAQdMRcaQbk1KG1SAjNfoaHAKrSo'; // Your Google Sheet ID\n  const apiKey = 'AIzaSyBAPhvHyE-PbFUktWwlt-2_KJfwQTabEvQ'; // Your API Key\n  const tabNames = ['S1', 'S2', 'S3PM', 'S3IR', 'follow']; // List of your sheet tabs\n  const plColumnIndex = 8; // Index for the P/L column (Column I)\n\n  useEffect(() => {\n    const fetchAllData = async () => {\n      try {\n        // Fetch data from all tabs\n        const tabDataPromises = tabNames.map(tab => axios.get(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${tab}?key=${apiKey}`));\n\n        // Wait for all promises to resolve\n        const responses = await Promise.all(tabDataPromises);\n\n        // Combine all data into a summary object\n        const summary = {};\n        responses.forEach((response, tabIndex) => {\n          const tabData = response.data.values || [];\n          const tabName = tabNames[tabIndex];\n\n          // Debugging: Log the first few rows to check structure\n          console.log(`Data for ${tabName}:`, tabData.slice(0, 5));\n\n          // Check if there is data in the tab\n          if (tabData.length < 2) {\n            console.warn(`No data found in tab ${tabName}`);\n          }\n\n          // Skip the header row and process each row\n          tabData.slice(1).forEach((row, rowIndex) => {\n            const date = row[0]; // Date column\n\n            // Skip rows where the date is \"--------------\" or empty\n            if (!date || date === \"--------------\") {\n              console.warn(`Skipping invalid row in ${tabName} at row ${rowIndex + 1}:`, row);\n              return;\n            }\n\n            // Check if P/L column exists and has a valid number\n            if (row[plColumnIndex] !== undefined) {\n              // Remove commas and parse the number\n              const plRaw = row[plColumnIndex].replace(/,/g, '').trim();\n              const pl = parseFloat(plRaw);\n              if (!isNaN(pl)) {\n                if (!summary[date]) {\n                  summary[date] = {\n                    date\n                  };\n                }\n                summary[date][tabName] = (summary[date][tabName] || 0) + pl;\n\n                // Debugging: Log each row processing\n                console.log(`Processing row ${rowIndex + 1} for ${tabName} on ${date}:`, row, `Parsed P/L: ${pl}`);\n              } else {\n                console.warn(`Invalid P/L value at row ${rowIndex + 1} for ${tabName} on ${date}:`, row[plColumnIndex]);\n              }\n            } else {\n              console.warn(`Missing P/L value at row ${rowIndex + 1} for ${tabName} on ${date}`);\n            }\n          });\n        });\n\n        // Convert summary object to array and calculate total\n        const summaryArray = Object.values(summary).map(entry => {\n          const total = tabNames.reduce((acc, tab) => acc + (entry[tab] || 0), 0);\n          return {\n            ...entry,\n            Total: total\n          };\n        });\n        setSummaryData(summaryArray);\n      } catch (error) {\n        setError('Error fetching data');\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllData();\n  }, []);\n  const sortData = key => {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    const sortedData = [...summaryData].sort((a, b) => {\n      if (key === 'date') {\n        // For date, convert to Date object and compare\n        return direction === 'ascending' ? new Date(a[key].split('/').reverse().join('-')) - new Date(b[key].split('/').reverse().join('-')) : new Date(b[key].split('/').reverse().join('-')) - new Date(a[key].split('/').reverse().join('-'));\n      } else {\n        // For other columns, compare numerical values\n        const aValue = a[key] !== undefined ? a[key] : 0;\n        const bValue = b[key] !== undefined ? b[key] : 0;\n        return direction === 'ascending' ? aValue - bValue : bValue - aValue;\n      }\n    });\n    setSummaryData(sortedData);\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Performance Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => sortData('date'),\n            children: [\"Date \", sortConfig.key === 'date' ? sortConfig.direction === 'ascending' ? '↑' : '↓' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), tabNames.map((tab, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => sortData(tab),\n            children: [tab, \" \", sortConfig.key === tab ? sortConfig.direction === 'ascending' ? '↑' : '↓' : '']\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => sortData('Total'),\n            children: [\"Total \", sortConfig.key === 'Total' ? sortConfig.direction === 'ascending' ? '↑' : '↓' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: summaryData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), tabNames.map((tab, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: row[tab] > 0 ? 'positive' : row[tab] < 0 ? 'negative' : '',\n            children: row[tab] !== undefined ? Math.round(row[tab]) : '-'\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: row.Total > 0 ? 'positive' : row.Total < 0 ? 'negative' : '',\n            children: Math.round(row.Total)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleSheetData, \"jEo4JZiIfzQffSFb9tx2ZsXddjw=\");\n_c = GoogleSheetData;\nexport default GoogleSheetData;\nvar _c;\n$RefreshReg$(_c, \"GoogleSheetData\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GoogleSheetData","_s","summaryData","setSummaryData","loading","setLoading","error","setError","sortConfig","setSortConfig","key","direction","sheetId","apiKey","tabNames","plColumnIndex","fetchAllData","tabDataPromises","map","tab","get","responses","Promise","all","summary","forEach","response","tabIndex","tabData","data","values","tabName","console","log","slice","length","warn","row","rowIndex","date","undefined","plRaw","replace","trim","pl","parseFloat","isNaN","summaryArray","Object","entry","total","reduce","acc","Total","sortData","sortedData","sort","a","b","Date","split","reverse","join","aValue","bValue","children","fileName","_jsxFileName","lineNumber","columnNumber","border","onClick","index","cellIndex","className","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/CMW1/Downloads/pachira-financials/src/components/GoogleSheetData.js"],"sourcesContent":["// src/components/GoogleSheetData.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './GoogleSheetData.css'; // Import CSS for conditional formatting\r\n\r\nconst GoogleSheetData = () => {\r\n  const [summaryData, setSummaryData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'ascending' });\r\n\r\n  const sheetId = '1D2B33Uj1vS_weRZQAQdMRcaQbk1KG1SAjNfoaHAKrSo'; // Your Google Sheet ID\r\n  const apiKey = 'AIzaSyBAPhvHyE-PbFUktWwlt-2_KJfwQTabEvQ'; // Your API Key\r\n  const tabNames = ['S1', 'S2', 'S3PM', 'S3IR', 'follow']; // List of your sheet tabs\r\n  const plColumnIndex = 8; // Index for the P/L column (Column I)\r\n\r\n  useEffect(() => {\r\n    const fetchAllData = async () => {\r\n      try {\r\n        // Fetch data from all tabs\r\n        const tabDataPromises = tabNames.map((tab) =>\r\n          axios.get(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${tab}?key=${apiKey}`)\r\n        );\r\n\r\n        // Wait for all promises to resolve\r\n        const responses = await Promise.all(tabDataPromises);\r\n\r\n        // Combine all data into a summary object\r\n        const summary = {};\r\n\r\n        responses.forEach((response, tabIndex) => {\r\n          const tabData = response.data.values || [];\r\n          const tabName = tabNames[tabIndex];\r\n\r\n          // Debugging: Log the first few rows to check structure\r\n          console.log(`Data for ${tabName}:`, tabData.slice(0, 5));\r\n\r\n          // Check if there is data in the tab\r\n          if (tabData.length < 2) {\r\n            console.warn(`No data found in tab ${tabName}`);\r\n          }\r\n\r\n          // Skip the header row and process each row\r\n          tabData.slice(1).forEach((row, rowIndex) => {\r\n            const date = row[0]; // Date column\r\n\r\n            // Skip rows where the date is \"--------------\" or empty\r\n            if (!date || date === \"--------------\") {\r\n              console.warn(`Skipping invalid row in ${tabName} at row ${rowIndex + 1}:`, row);\r\n              return;\r\n            }\r\n\r\n            // Check if P/L column exists and has a valid number\r\n            if (row[plColumnIndex] !== undefined) {\r\n              // Remove commas and parse the number\r\n              const plRaw = row[plColumnIndex].replace(/,/g, '').trim();\r\n              const pl = parseFloat(plRaw);\r\n\r\n              if (!isNaN(pl)) {\r\n                if (!summary[date]) {\r\n                  summary[date] = { date };\r\n                }\r\n                summary[date][tabName] = (summary[date][tabName] || 0) + pl;\r\n\r\n                // Debugging: Log each row processing\r\n                console.log(`Processing row ${rowIndex + 1} for ${tabName} on ${date}:`, row, `Parsed P/L: ${pl}`);\r\n              } else {\r\n                console.warn(`Invalid P/L value at row ${rowIndex + 1} for ${tabName} on ${date}:`, row[plColumnIndex]);\r\n              }\r\n            } else {\r\n              console.warn(`Missing P/L value at row ${rowIndex + 1} for ${tabName} on ${date}`);\r\n            }\r\n          });\r\n        });\r\n\r\n        // Convert summary object to array and calculate total\r\n        const summaryArray = Object.values(summary).map(entry => {\r\n          const total = tabNames.reduce((acc, tab) => acc + (entry[tab] || 0), 0);\r\n          return { ...entry, Total: total };\r\n        });\r\n\r\n        setSummaryData(summaryArray);\r\n      } catch (error) {\r\n        setError('Error fetching data');\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const sortData = (key) => {\r\n    let direction = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n\r\n    const sortedData = [...summaryData].sort((a, b) => {\r\n      if (key === 'date') {\r\n        // For date, convert to Date object and compare\r\n        return direction === 'ascending'\r\n          ? new Date(a[key].split('/').reverse().join('-')) - new Date(b[key].split('/').reverse().join('-'))\r\n          : new Date(b[key].split('/').reverse().join('-')) - new Date(a[key].split('/').reverse().join('-'));\r\n      } else {\r\n        // For other columns, compare numerical values\r\n        const aValue = a[key] !== undefined ? a[key] : 0;\r\n        const bValue = b[key] !== undefined ? b[key] : 0;\r\n        return direction === 'ascending' ? aValue - bValue : bValue - aValue;\r\n      }\r\n    });\r\n\r\n    setSummaryData(sortedData);\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Performance Summary</h1>\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th onClick={() => sortData('date')}>Date {sortConfig.key === 'date' ? (sortConfig.direction === 'ascending' ? '↑' : '↓') : ''}</th>\r\n            {tabNames.map((tab, index) => (\r\n              <th key={index} onClick={() => sortData(tab)}>\r\n                {tab} {sortConfig.key === tab ? (sortConfig.direction === 'ascending' ? '↑' : '↓') : ''}\r\n              </th>\r\n            ))}\r\n            <th onClick={() => sortData('Total')}>Total {sortConfig.key === 'Total' ? (sortConfig.direction === 'ascending' ? '↑' : '↓') : ''}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {summaryData.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              <td>{row.date}</td>\r\n              {tabNames.map((tab, cellIndex) => (\r\n                <td\r\n                  key={cellIndex}\r\n                  className={row[tab] > 0 ? 'positive' : row[tab] < 0 ? 'negative' : ''}\r\n                >\r\n                  {row[tab] !== undefined ? Math.round(row[tab]) : '-'}\r\n                </td>\r\n              ))}\r\n              <td\r\n                className={row.Total > 0 ? 'positive' : row.Total < 0 ? 'negative' : ''}\r\n              >\r\n                {Math.round(row.Total)}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleSheetData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}